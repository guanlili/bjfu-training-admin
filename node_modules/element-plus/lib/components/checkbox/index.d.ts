export declare const ElCheckbox: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: () => undefined;
    };
    label: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
    };
    indeterminate: BooleanConstructor;
    disabled: BooleanConstructor;
    checked: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: undefined;
    };
    trueLabel: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    falseLabel: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    controls: {
        type: StringConstructor;
        default: undefined;
    };
    border: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("../../utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    tabindex: (StringConstructor | NumberConstructor)[];
}, {
    isChecked: import("vue").ComputedRef<boolean>;
    isDisabled: import("vue").ComputedRef<boolean | undefined>;
    checkboxSize: import("vue").ComputedRef<import("../../utils/types").ComponentSize>;
    model: import("vue").WritableComputedRef<any>;
    handleChange: (e: InputEvent) => void;
    focus: import("vue").Ref<boolean>;
    size: import("vue").ComputedRef<import("../../utils/types").ComponentSize>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    label?: unknown;
    indeterminate?: unknown;
    disabled?: unknown;
    checked?: unknown;
    name?: unknown;
    trueLabel?: unknown;
    falseLabel?: unknown;
    id?: unknown;
    controls?: unknown;
    border?: unknown;
    size?: unknown;
    tabindex?: unknown;
} & {
    border: boolean;
    disabled: boolean;
    checked: boolean;
    indeterminate: boolean;
} & {
    id?: string | undefined;
    name?: string | undefined;
    label?: string | number | boolean | Record<string, any> | undefined;
    size?: import("../../utils/types").ComponentSize | undefined;
    tabindex?: string | number | undefined;
    controls?: string | undefined;
    modelValue?: string | number | boolean | undefined;
    trueLabel?: string | number | undefined;
    falseLabel?: string | number | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    id: string;
    name: string;
    border: boolean;
    disabled: boolean;
    checked: boolean;
    controls: string;
    modelValue: string | number | boolean;
    indeterminate: boolean;
    trueLabel: string | number;
    falseLabel: string | number;
}>> & {
    CheckboxButton: import("vue").DefineComponent<{
        modelValue: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            default: () => undefined;
        };
        label: {
            type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
        };
        indeterminate: BooleanConstructor;
        disabled: BooleanConstructor;
        checked: BooleanConstructor;
        name: {
            type: StringConstructor;
            default: undefined;
        };
        trueLabel: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        falseLabel: {
            type: (StringConstructor | NumberConstructor)[];
            default: undefined;
        };
        tabindex: (StringConstructor | NumberConstructor)[];
        size: StringConstructor;
    }, {
        focus: import("vue").Ref<boolean>;
        isChecked: import("vue").ComputedRef<boolean>;
        isDisabled: import("vue").ComputedRef<boolean | undefined>;
        model: import("vue").WritableComputedRef<any>;
        handleChange: (e: InputEvent) => void;
        activeStyle: import("vue").ComputedRef<{
            backgroundColor: string;
            borderColor: string;
            color: string;
            boxShadow: string | null;
        }>;
        size: import("vue").ComputedRef<import("../../utils/types").ComponentSize>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        modelValue?: unknown;
        label?: unknown;
        indeterminate?: unknown;
        disabled?: unknown;
        checked?: unknown;
        name?: unknown;
        trueLabel?: unknown;
        falseLabel?: unknown;
        tabindex?: unknown;
        size?: unknown;
    } & {
        disabled: boolean;
        checked: boolean;
        indeterminate: boolean;
    } & {
        name?: string | undefined;
        label?: string | number | boolean | Record<string, any> | undefined;
        size?: string | undefined;
        tabindex?: string | number | undefined;
        modelValue?: string | number | boolean | undefined;
        trueLabel?: string | number | undefined;
        falseLabel?: string | number | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        name: string;
        disabled: boolean;
        checked: boolean;
        modelValue: string | number | boolean;
        indeterminate: boolean;
        trueLabel: string | number;
        falseLabel: string | number;
    }>;
    CheckboxGroup: import("vue").DefineComponent<{
        modelValue: {
            type: ArrayConstructor;
            default: () => never[];
        };
        disabled: BooleanConstructor;
        min: {
            type: NumberConstructor;
            default: undefined;
        };
        max: {
            type: NumberConstructor;
            default: undefined;
        };
        size: {
            type: import("vue").PropType<import("../../utils/types").ComponentSize>;
            validator: (val: string) => boolean;
        };
        fill: {
            type: StringConstructor;
            default: undefined;
        };
        textColor: {
            type: StringConstructor;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        modelValue?: unknown;
        disabled?: unknown;
        min?: unknown;
        max?: unknown;
        size?: unknown;
        fill?: unknown;
        textColor?: unknown;
        tag?: unknown;
    } & {
        disabled: boolean;
        tag: string;
        modelValue: unknown[];
    } & {
        fill?: string | undefined;
        max?: number | undefined;
        size?: import("../../utils/types").ComponentSize | undefined;
        min?: number | undefined;
        textColor?: string | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        fill: string;
        max: number;
        disabled: boolean;
        tag: string;
        min: number;
        modelValue: unknown[];
        textColor: string;
    }>;
};
export default ElCheckbox;
export declare const ElCheckboxButton: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: () => undefined;
    };
    label: {
        type: (ObjectConstructor | StringConstructor | BooleanConstructor | NumberConstructor)[];
    };
    indeterminate: BooleanConstructor;
    disabled: BooleanConstructor;
    checked: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: undefined;
    };
    trueLabel: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    falseLabel: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    tabindex: (StringConstructor | NumberConstructor)[];
    size: StringConstructor;
}, {
    focus: import("vue").Ref<boolean>;
    isChecked: import("vue").ComputedRef<boolean>;
    isDisabled: import("vue").ComputedRef<boolean | undefined>;
    model: import("vue").WritableComputedRef<any>;
    handleChange: (e: InputEvent) => void;
    activeStyle: import("vue").ComputedRef<{
        backgroundColor: string;
        borderColor: string;
        color: string;
        boxShadow: string | null;
    }>;
    size: import("vue").ComputedRef<import("../../utils/types").ComponentSize>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    label?: unknown;
    indeterminate?: unknown;
    disabled?: unknown;
    checked?: unknown;
    name?: unknown;
    trueLabel?: unknown;
    falseLabel?: unknown;
    tabindex?: unknown;
    size?: unknown;
} & {
    disabled: boolean;
    checked: boolean;
    indeterminate: boolean;
} & {
    name?: string | undefined;
    label?: string | number | boolean | Record<string, any> | undefined;
    size?: string | undefined;
    tabindex?: string | number | undefined;
    modelValue?: string | number | boolean | undefined;
    trueLabel?: string | number | undefined;
    falseLabel?: string | number | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    name: string;
    disabled: boolean;
    checked: boolean;
    modelValue: string | number | boolean;
    indeterminate: boolean;
    trueLabel: string | number;
    falseLabel: string | number;
}>>;
export declare const ElCheckboxGroup: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    modelValue: {
        type: ArrayConstructor;
        default: () => never[];
    };
    disabled: BooleanConstructor;
    min: {
        type: NumberConstructor;
        default: undefined;
    };
    max: {
        type: NumberConstructor;
        default: undefined;
    };
    size: {
        type: import("vue").PropType<import("../../utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    fill: {
        type: StringConstructor;
        default: undefined;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    disabled?: unknown;
    min?: unknown;
    max?: unknown;
    size?: unknown;
    fill?: unknown;
    textColor?: unknown;
    tag?: unknown;
} & {
    disabled: boolean;
    tag: string;
    modelValue: unknown[];
} & {
    fill?: string | undefined;
    max?: number | undefined;
    size?: import("../../utils/types").ComponentSize | undefined;
    min?: number | undefined;
    textColor?: string | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    fill: string;
    max: number;
    disabled: boolean;
    tag: string;
    min: number;
    modelValue: unknown[];
    textColor: string;
}>>;
