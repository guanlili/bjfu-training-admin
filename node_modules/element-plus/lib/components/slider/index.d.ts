import type { SFCWithInstall } from '@element-plus/utils/types';
declare const _Slider: SFCWithInstall<import("vue").DefineComponent<{
    modelValue: {
        type: import("vue").PropType<number | number[]>;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    showInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInputControls: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("@element-plus/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    inputSize: {
        type: import("vue").PropType<import("@element-plus/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    showStops: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatTooltip: {
        type: import("vue").PropType<(val: number) => string | number>;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    tooltipClass: {
        type: StringConstructor;
        default: undefined;
    };
    marks: ObjectConstructor;
}, {
    firstValue: import("vue").Ref<number>;
    secondValue: import("vue").Ref<number>;
    oldValue: import("vue").Ref<number>;
    dragging: import("vue").Ref<boolean>;
    sliderSize: import("vue").Ref<number>;
    slider: import("vue").ShallowRef<import("@element-plus/utils/types").Nullable<HTMLElement>>;
    firstButton: import("vue").Ref<null>;
    secondButton: import("vue").Ref<null>;
    sliderDisabled: import("vue").ComputedRef<boolean>;
    runwayStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    barStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    emitChange: () => Promise<void>;
    onSliderClick: (event: MouseEvent) => void;
    getStopStyle: (position: number) => import("vue").CSSProperties;
    setFirstValue: (firstValue: number) => void;
    setSecondValue: (secondValue: number) => void;
    stops: import("vue").ComputedRef<number[]>;
    markList: import("vue").ComputedRef<import("./src/slider.type").Mark[]>;
    sliderWrapper: import("vue").Ref<import("@element-plus/utils/types").Nullable<HTMLElement>>;
    sliderWrapperSize: import("vue").ComputedRef<import("@element-plus/utils/types").ComponentSize>;
    sliderInputSize: import("vue").ComputedRef<import("@element-plus/utils/types").ComponentSize>;
    sliderKls: import("vue").ComputedRef<string[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("input" | "change" | "update:modelValue")[], "input" | "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    min?: unknown;
    max?: unknown;
    step?: unknown;
    showInput?: unknown;
    showInputControls?: unknown;
    size?: unknown;
    inputSize?: unknown;
    showStops?: unknown;
    showTooltip?: unknown;
    formatTooltip?: unknown;
    disabled?: unknown;
    range?: unknown;
    vertical?: unknown;
    height?: unknown;
    debounce?: unknown;
    label?: unknown;
    tooltipClass?: unknown;
    marks?: unknown;
} & {
    max: number;
    height: string;
    disabled: boolean;
    range: boolean;
    vertical: boolean;
    step: number;
    min: number;
    debounce: number;
    modelValue: number | number[];
    showTooltip: boolean;
    showInput: boolean;
    showInputControls: boolean;
    showStops: boolean;
} & {
    label?: string | undefined;
    size?: import("@element-plus/utils/types").ComponentSize | undefined;
    inputSize?: import("@element-plus/utils/types").ComponentSize | undefined;
    formatTooltip?: ((val: number) => string | number) | undefined;
    tooltipClass?: string | undefined;
    marks?: Record<string, any> | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    max: number;
    height: string;
    label: string;
    disabled: boolean;
    range: boolean;
    vertical: boolean;
    step: number;
    min: number;
    debounce: number;
    modelValue: number | number[];
    showTooltip: boolean;
    formatTooltip: (val: number) => string | number;
    tooltipClass: string;
    showInput: boolean;
    showInputControls: boolean;
    showStops: boolean;
}>>;
export default _Slider;
export declare const ElSlider: SFCWithInstall<import("vue").DefineComponent<{
    modelValue: {
        type: import("vue").PropType<number | number[]>;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    showInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInputControls: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<import("@element-plus/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    inputSize: {
        type: import("vue").PropType<import("@element-plus/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    showStops: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatTooltip: {
        type: import("vue").PropType<(val: number) => string | number>;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    tooltipClass: {
        type: StringConstructor;
        default: undefined;
    };
    marks: ObjectConstructor;
}, {
    firstValue: import("vue").Ref<number>;
    secondValue: import("vue").Ref<number>;
    oldValue: import("vue").Ref<number>;
    dragging: import("vue").Ref<boolean>;
    sliderSize: import("vue").Ref<number>;
    slider: import("vue").ShallowRef<import("@element-plus/utils/types").Nullable<HTMLElement>>;
    firstButton: import("vue").Ref<null>;
    secondButton: import("vue").Ref<null>;
    sliderDisabled: import("vue").ComputedRef<boolean>;
    runwayStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    barStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    emitChange: () => Promise<void>;
    onSliderClick: (event: MouseEvent) => void;
    getStopStyle: (position: number) => import("vue").CSSProperties;
    setFirstValue: (firstValue: number) => void;
    setSecondValue: (secondValue: number) => void;
    stops: import("vue").ComputedRef<number[]>;
    markList: import("vue").ComputedRef<import("./src/slider.type").Mark[]>;
    sliderWrapper: import("vue").Ref<import("@element-plus/utils/types").Nullable<HTMLElement>>;
    sliderWrapperSize: import("vue").ComputedRef<import("@element-plus/utils/types").ComponentSize>;
    sliderInputSize: import("vue").ComputedRef<import("@element-plus/utils/types").ComponentSize>;
    sliderKls: import("vue").ComputedRef<string[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("input" | "change" | "update:modelValue")[], "input" | "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    min?: unknown;
    max?: unknown;
    step?: unknown;
    showInput?: unknown;
    showInputControls?: unknown;
    size?: unknown;
    inputSize?: unknown;
    showStops?: unknown;
    showTooltip?: unknown;
    formatTooltip?: unknown;
    disabled?: unknown;
    range?: unknown;
    vertical?: unknown;
    height?: unknown;
    debounce?: unknown;
    label?: unknown;
    tooltipClass?: unknown;
    marks?: unknown;
} & {
    max: number;
    height: string;
    disabled: boolean;
    range: boolean;
    vertical: boolean;
    step: number;
    min: number;
    debounce: number;
    modelValue: number | number[];
    showTooltip: boolean;
    showInput: boolean;
    showInputControls: boolean;
    showStops: boolean;
} & {
    label?: string | undefined;
    size?: import("@element-plus/utils/types").ComponentSize | undefined;
    inputSize?: import("@element-plus/utils/types").ComponentSize | undefined;
    formatTooltip?: ((val: number) => string | number) | undefined;
    tooltipClass?: string | undefined;
    marks?: Record<string, any> | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    max: number;
    height: string;
    label: string;
    disabled: boolean;
    range: boolean;
    vertical: boolean;
    step: number;
    min: number;
    debounce: number;
    modelValue: number | number[];
    showTooltip: boolean;
    formatTooltip: (val: number) => string | number;
    tooltipClass: string;
    showInput: boolean;
    showInputControls: boolean;
    showStops: boolean;
}>>;
export * from './src/slider.type';
