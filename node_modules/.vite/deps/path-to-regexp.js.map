{
  "version": 3,
  "sources": ["../../path-to-regexp/index.js", "dep:path-to-regexp"],
  "sourcesContent": ["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\nvar DEFAULT_DELIMITERS = './'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var delimiters = (options && options.delimiters) || DEFAULT_DELIMITERS\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var next = str[index]\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n\n      if (delimiters.indexOf(path[k]) > -1) {\n        prev = path[k]\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var partial = prev !== '' && next !== undefined && next !== prev\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = prev || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) {\n        // Prepend partial segment prefixes.\n        if (token.partial) path += token.prefix\n\n        continue\n      }\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER)\n  var delimiters = options.delimiters || DEFAULT_DELIMITERS\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n  var isEndDelimited = tokens.length === 0\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (token.partial) {\n          route += escapeString(token.prefix) + '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + delimiter + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n", "export default require(\"./node_modules/path-to-regexp/index.js\");"],
  "mappings": "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",
  "names": ["i"]
}
